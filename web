'use client'

import { useState, useRef, Suspense } from 'react'
import { Canvas, useFrame, useLoader } from '@react-three/fiber'
import { OrbitControls, Text, Html, useGLTF } from '@react-three/drei'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { Play, Pause, SkipBack, SkipForward } from 'lucide-react'

function MerchModel({ item, position, rotation }) {
  const { nodes, materials } = useGLTF(`/assets/3d/${item}.glb`)
  return (
    <group position={position} rotation={rotation}>
      <mesh geometry={nodes[item].geometry} material={materials[item]} />
    </group>
  )
}

function Album({ position, rotation }) {
  const texture = useLoader(TextureLoader, '/assets/album-cover.jpg')
  return (
    <mesh position={position} rotation={rotation}>
      <boxGeometry args={[1, 1, 0.1]} />
      <meshStandardMaterial map={texture} />
    </mesh>
  )
}

function Scene() {
  const albumRef = useRef()
  useFrame((state) => {
    if (albumRef.current) {
      albumRef.current.rotation.y += 0.01
    }
  })

  return (
    <>
      <ambientLight intensity={0.5} />
      <pointLight position={[10, 10, 10]} />
      <Suspense fallback={null}>
        <Album ref={albumRef} position={[0, 0, 0]} rotation={[0, 0, 0]} />
        <MerchModel item="hat" position={[-2, 1, 0]} rotation={[0, Math.PI / 4, 0]} />
        <MerchModel item="sweatshirt" position={[2, 0, 0]} rotation={[0, -Math.PI / 4, 0]} />
        <MerchModel item="sweatpants" position={[0, -2, 0]} rotation={[-Math.PI / 2, 0, 0]} />
      </Suspense>
      <OrbitControls enableZoom={false} />
    </>
  )
}

export default function HomePage() {
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentTrack, setCurrentTrack] = useState(0)
  const tracks = ['Track 1', 'Track 2', 'Track 3']

  return (
    <div className="min-h-screen bg-black text-white">
      <header className="p-4 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Your Artist Name</h1>
        <nav>
          <Button variant="link" className="text-white">Music</Button>
          <Button variant="link" className="text-white">Merch</Button>
          <Button variant="link" className="text-white">About</Button>
        </nav>
      </header>

      <main className="container mx-auto p-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h2 className="text-3xl font-bold mb-4">Latest Release</h2>
            <div className="h-[400px] bg-gray-800 rounded-lg overflow-hidden">
              <Canvas>
                <Scene />
              </Canvas>
            </div>
          </div>

          <div>
            <h2 className="text-3xl font-bold mb-4">Featured Merch</h2>
            <div className="grid grid-cols-2 gap-4">
              {['Hat', 'Sweatshirt', 'Sweatpants'].map((item) => (
                <div key={item} className="bg-gray-800 p-4 rounded-lg">
                  <h3 className="text-xl font-bold mb-2">{item}</h3>
                  <p className="mb-2">$29.99</p>
                  <Button>Add to Cart</Button>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="mt-8">
          <h2 className="text-3xl font-bold mb-4">Music Player</h2>
          <div className="bg-gray-800 p-4 rounded-lg">
            <div className="flex justify-between items-center mb-4">
              <p className="text-xl">{tracks[currentTrack]}</p>
              <div className="flex space-x-2">
                <Button
                  size="icon"
                  variant="ghost"
                  onClick={() => setCurrentTrack((prev) => (prev - 1 + tracks.length) % tracks.length)}
                >
                  <SkipBack className="h-4 w-4" />
                </Button>
                <Button
                  size="icon"
                  variant="ghost"
                  onClick={() => setIsPlaying(!isPlaying)}
                >
                  {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                </Button>
                <Button
                  size="icon"
                  variant="ghost"
                  onClick={() => setCurrentTrack((prev) => (prev + 1) % tracks.length)}
                >
                  <SkipForward className="h-4 w-4" />
                </Button>
              </div>
            </div>
            <Slider defaultValue={[33]} max={100} step={1} />
          </div>
        </div>
      </main>

      <footer className="mt-8 p-4 text-center text-gray-400">
        <p>&copy; 2024 Your Artist Name. All rights reserved.</p>
      </footer>
    </div>
  )
}
